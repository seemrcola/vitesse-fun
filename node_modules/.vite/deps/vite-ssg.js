import {
  createHead
} from "./chunk-5T6MEUIR.js";
import {
  createMemoryHistory,
  createRouter,
  createWebHistory
} from "./chunk-XNX3CFZA.js";
import "./chunk-XYHHE7SP.js";
import "./chunk-M74YWEUR.js";
import "./chunk-XCZD5OPM.js";
import {
  createApp,
  createSSRApp,
  defineComponent,
  onMounted,
  ref
} from "./chunk-GLITNA64.js";
import "./chunk-RSJERJUL.js";

// node_modules/.pnpm/vite-ssg@0.21.0_paqgs2apxnemeyd6unqo6uql7u/node_modules/vite-ssg/dist/shared/vite-ssg.be31ffcd.mjs
function deserializeState(state) {
  try {
    return JSON.parse(state || "{}");
  } catch (error) {
    console.error("[SSG] On state deserialization -", error, state);
    return {};
  }
}

// node_modules/.pnpm/vite-ssg@0.21.0_paqgs2apxnemeyd6unqo6uql7u/node_modules/vite-ssg/dist/shared/vite-ssg.c3db3195.mjs
function documentReady(_passThrough) {
  if (document.readyState === "loading") {
    return new Promise((resolve) => {
      document.addEventListener("DOMContentLoaded", () => resolve(_passThrough));
    });
  }
  return Promise.resolve(_passThrough);
}
var ClientOnly = defineComponent({
  setup(props, { slots }) {
    const mounted = ref(false);
    onMounted(() => mounted.value = true);
    return () => {
      if (!mounted.value)
        return slots.placeholder && slots.placeholder({});
      return slots.default && slots.default({});
    };
  }
});

// node_modules/.pnpm/vite-ssg@0.21.0_paqgs2apxnemeyd6unqo6uql7u/node_modules/vite-ssg/dist/index.mjs
function ViteSSG(App, routerOptions, fn, options = {}) {
  const {
    transformState,
    registerComponents = true,
    useHead = true,
    rootContainer = "#app"
  } = options;
  const isClient = typeof window !== "undefined";
  async function createApp$1(client = false, routePath) {
    var _a;
    const app = client ? createApp(App) : createSSRApp(App);
    let head;
    if (useHead) {
      head = createHead();
      app.use(head);
    }
    const router = createRouter({
      history: client ? createWebHistory(routerOptions.base) : createMemoryHistory(routerOptions.base),
      ...routerOptions
    });
    const { routes } = routerOptions;
    if (registerComponents)
      app.component("ClientOnly", ClientOnly);
    const appRenderCallbacks = [];
    const onSSRAppRendered = client ? () => {
    } : (cb) => appRenderCallbacks.push(cb);
    const triggerOnSSRAppRendered = () => {
      return Promise.all(appRenderCallbacks.map((cb) => cb()));
    };
    const context = {
      app,
      head,
      isClient,
      router,
      routes,
      onSSRAppRendered,
      triggerOnSSRAppRendered,
      initialState: {},
      transformState,
      routePath
    };
    if (client) {
      await documentReady();
      context.initialState = (transformState == null ? void 0 : transformState(window.__INITIAL_STATE__ || {})) || deserializeState(window.__INITIAL_STATE__);
    }
    await (fn == null ? void 0 : fn(context));
    app.use(router);
    let entryRoutePath;
    let isFirstRoute = true;
    router.beforeEach((to, from, next) => {
      if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {
        isFirstRoute = false;
        entryRoutePath = to.path;
        to.meta.state = context.initialState;
      }
      next();
    });
    if (!client) {
      const route = (_a = context.routePath) != null ? _a : "/";
      router.push(route);
      await router.isReady();
      context.initialState = router.currentRoute.value.meta.state || {};
    }
    const initialState = context.initialState;
    return {
      ...context,
      initialState
    };
  }
  if (isClient) {
    (async () => {
      const { app, router } = await createApp$1(true);
      await router.isReady();
      app.mount(rootContainer, true);
    })();
  }
  return createApp$1;
}
export {
  ViteSSG
};
//# sourceMappingURL=vite-ssg.js.map
